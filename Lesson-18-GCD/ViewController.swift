//
//  ViewController.swift
//  Lesson-18-GCD
//
//  Created by Aleksandr Moroshovskyi on 18.04.2024.
//

/*
 //—á–µ–Ω—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤–∞–Ω–∏–π –∫–æ–¥
 //–≤–∏–∫–æ–Ω—É—î–º–æ —â–æ—Å—å async,
 //–ø–æ—Ç—ñ–º –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ main - –¥–ª—è –∑–º—ñ–Ω –Ω–∞ view, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥
 
 DispatchQueue.global(qos: .default).async {
     Printer().printSomeText(text: "üõë default")
     
     DispatchQueue.main.async {
         Printer().printSomeText(text: "üéÉ default")
     }
 }
 */

import UIKit

class ViewController: UIViewController {
    
    @IBOutlet weak var btn: UIButton!
    
    //–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–≤–æ—î—ó —á–µ—Ä–≥–∏
    //let myQueue = DispatchQueue(label: "MyOwnQueue", qos: .default)
    let myQueue = DispatchQueue(label: "MyOwnQueue", attributes: .concurrent)
    
    //without .concurrent - it's Serial
    let myQueueSerial = DispatchQueue(label: "MyOwnQueue")
    
    //–æ–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –Ω–∞ –≤–µ—Å—å –∫–ª–∞—Å
    let mySingleOperationQueue = OperationQueue()
    let mySingleOperationQueueSerial = OperationQueue()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        //if 1 - it's serial
        mySingleOperationQueueSerial.maxConcurrentOperationCount = 1
        
        //test
        progressView.progress = 0
    }
    
    @IBOutlet weak var counterLabel: UILabel!
    @IBOutlet weak var progressView: UIProgressView!
    
    @IBAction func thirdBtnAction(_ sender: Any) {
        
        debugPrint("üü§ Third button did tap")
        
        //Operation
        //runOperation()
        
        test()
            
        debugPrint("‚úîÔ∏è Third button action completed")
    }
    
    @IBAction func secondButtonAction(_ sender: Any) {
        
        debugPrint("üöõ BIG second button did tap")
        
        //runSomeInGLobalUserDefaultSYNC()
        //runSomeInGLobalUserDefault_ASYNC_ASYNC()
        
        //.concurrent
        //runSomeCode1()
        //runSomeCode2()
        //runSomeCode3()
        
        //.serial
        //runSomeCode1_async_mainasync()
        //runSomeCode2_async_mainasync()
        //runSomeCode3_async_mainasync()
        
        //DispatchGroup
        //runMultipleCodeInClobal()
        
        runMultipleCodeInClobalFor()
        
        debugPrint("‚úÖ BIG secondButtonAction completed")
    }
    
    @IBAction func btnAction(_ sender: Any) {
        
        //MAIN Thread 1 Queue : com.apple.main-thread (serial)
        /*
        –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—î —É main –ø–æ—Ç–æ—Ü—ñ, —Ç–∞ –≤—Å–µ, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è
        —É —Ü—å–æ–º—É –∂ –ø–æ—Ç–æ—Ü—ñ, –±–ª–æ–∫—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
         
        debugPrint("üèÅ RUN button did tap")
        Printer().printSomeText(text: "‚è≥")
        debugPrint("‚òëÔ∏è RUN btnAction completed")
         */
        
        //–í–∏–∫–æ–Ω–∞—î–º–æ –∫–æ–¥ —É –≥–æ–ª–æ–≤–Ω—ñ–π —á–µ—Ä–∑—ñ main.async
        /*
        debugPrint("üèÅ RUN button did tap")
        runSomeCodeInMain()
        debugPrint("‚òëÔ∏è RUN btnAction completed")
         */
        
        //–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ –≤–∏—Å–æ–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–Ω–∏–π)
        debugPrint("üèÅ RUN button did tap")
        runSomeInGLobalUserInteractive()
        runSomeInGLobalUserInitiated()
        runSomeInGLobalUserDefault()
        debugPrint("‚òëÔ∏è RUN btnAction completed")
        
    }
    
    func runSomeCodeInMain() {
        
        //–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –º–æ–∂–ª–∏–≤–æ —Ç—ñ–ª—å–∫–∏ –≤ main.async
        DispatchQueue.main.async {
            //–±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –¥—É–∂–µ –¥–æ–≤–≥–æ, –±–ª–æ–∫—É—é—á–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            Printer().printSomeText(text: "‚òïÔ∏è Main -> Serial")
        }
    }
    
    func runSomeCodeInMainWRONGFUNC() {
        
        DispatchQueue.main.sync {
            //Thread 1: EXC_BREAKPOINT (code=1, subcode=0x10615e8f8)
            //–¢–∞–∫ —Ä–æ–±–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞ - DeadLock
            Printer().printSomeText(text: "‚è≥")
        }
    }
    
    //global —á–µ—Ä–≥–∞ –∑ —Ä—ñ–∑–Ω–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–Ω–∏–π)
    //userInteractive - –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    func runSomeInGLobalUserInteractive() {
        DispatchQueue.global(qos: .userInteractive).async {
            Printer().printSomeText(text: "üèÄ userInteractive")
        }
    }
    
    //userInitiated - —Å–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    func runSomeInGLobalUserInitiated() {
        DispatchQueue.global(qos: .userInitiated).async {
            Printer().printSomeText(text: "üßò‚Äç‚ôÄÔ∏è userInitiated")
        }
    }
    
    //default - default –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    // (–∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ü–µ–π –ø—Ä—ñ–æ—Ä—ñ—Ç–µ—Ç)
    func runSomeInGLobalUserDefault() {
        DispatchQueue.global(qos: .default).async {
            Printer().printSomeText(text: "üëç default")
        }
    }
    
    func runSomeInGLobalUserDefaultSYNC() {
        
        /*
         —è–∫—â–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ sync, —Ç–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è sync
         
         –î–û–ö–ò sync - —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ
         
         –∞ –ø–æ—Ç—ñ–º async
         */
        
        DispatchQueue.global(qos: .default).sync {
            Printer().printSomeText(text: "üõë default")
            
            DispatchQueue.main.async {
                Printer().printSomeText(text: "üéÉ default")
            }
        }
    }
    
    func runSomeInGLobalUserDefault_ASYNC_ASYNC() {
        
        /*
         —è–∫—â–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ async - async,
         —Ç–æ —É—Å–µ –æ–¥–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è –ø–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ –∫–æ–¥—É,
         –ø–æ—Ç—ñ–º –¥—Ä—É–≥–∞
         
         –ê–õ–ï —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ –î–û–°–¢–£–ü–ù–ò–ô
         
         —ñ –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —â–µ –∫–æ–¥ async
         */
        
        DispatchQueue.global(qos: .default).async {
            Printer().printSomeText(text: "üõë default")
            
            DispatchQueue.main.async {
                Printer().printSomeText(text: "üéÉ default")
            }
        }
    }
    
    func runSomeInGLobalUserDefault_SYNC_SYNC() {
        
        /*
         ‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è ‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è
         
         ‚õîÔ∏è SYNC - SYNC ‚õîÔ∏è
         
         ‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è ‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è
         
         DEADLOCK
         
         üîí üîí üîí üîí üîí
         
         */
        
        DispatchQueue.global(qos: .default).sync {
            Printer().printSomeText(text: "üõë default")
            
            DispatchQueue.main.sync {
                Printer().printSomeText(text: "üéÉ default")
            }
        }
    }
    
    //utility - –Ω–∏–∑—å–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    func runSomeInGLobalUserUtility() {
        DispatchQueue.global(qos: .utility).async {
            Printer().printSomeText(text: "ü•± utility")
        }
    }
    
    //background - –¥—É–∂–µ –Ω–∏–∑—å–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    //–º–æ–∂–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—å, –∑–∞–∫–µ–Ω—Å–µ–ª–µ—Ç–∏—Å—å,
    //—è–∫—â–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, user –ø—ñ–¥–µ –∑ –µ–∫—Ä–∞–Ω—É
    func runSomeInGLobalUserBackground() {
        DispatchQueue.global(qos: .background).async {
            Printer().printSomeText(text: "üîô background")
        }
    }
    
    //    ..1:12:55..
    
    //–ø—Ä–∏–∫–ª–∞–¥, —Ç—Ä–∏ func —É –æ–¥–Ω—ñ–π —á–µ—Ä–∑—ñ
    func runSomeCode1() {
        //DispatchQueue.global(qos: .default).async {
        myQueue.async {
            Printer().printSomeText(text: "1Ô∏è‚É£ default")
        }
    }
    
    func runSomeCode2() {
        //DispatchQueue.global(qos: .default).async {
        myQueue.async {
            Printer().printSomeText(text: "2Ô∏è‚É£ default")
        }
    }
    
    func runSomeCode3() {
        //DispatchQueue.global(qos: .default).async {
        myQueue.async {
            Printer().printSomeText(text: "3Ô∏è‚É£ default")
        }
    }
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    ///–≤–∏–∫–æ–Ω–∞—î–º–æ –∫–æ–¥ async —ñ –ø–µ—Ä–µ–¥–∞–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É myQueueSerial
    func runSomeCode1_async_mainasync() {
        DispatchQueue.global(qos: .default).async {
            Printer().printSomeText(text: "1Ô∏è‚É£ default")
            self.myQueueSerial.sync {
                debugPrint("Code 1 has been finished")
            }
        }
    }
    
    func runSomeCode2_async_mainasync() {
        DispatchQueue.global(qos: .default).async {
            Printer().printSomeText(text: "2Ô∏è‚É£ default")
            self.myQueueSerial.sync {
                debugPrint("Code 2 has been finished")
            }
        }
    }
    
    func runSomeCode3_async_mainasync() {
        DispatchQueue.global(qos: .default).async {
            Printer().printSomeText(text: "3Ô∏è‚É£ default")
            self.myQueueSerial.sync {
                debugPrint("Code 3 has been finished")
            }
        }
    }
    
    
    //DispatchGroup
    func runMultipleCodeInClobal() {
        
        let dispatchGroup = DispatchGroup()
        
        dispatchGroup.enter()
        let task1 = DispatchWorkItem {
            debugPrint("task1")
            dispatchGroup.leave()
        }
        
        dispatchGroup.enter()
        let task2 = DispatchWorkItem {
            debugPrint("task2")
            dispatchGroup.leave()
        }
        
        task2.perform()
        task1.perform()
        
        dispatchGroup.wait()
        
        debugPrint("Task1 and Task2 completed!")
    }
    
    func runMultipleCodeInClobalFor() {
        
        let dispatchGroup = DispatchGroup()
        var tasks: [DispatchWorkItem] = []
        
        for i in 0 ... 99 {
            dispatchGroup.enter()
            let task = DispatchWorkItem {
                debugPrint("task \(i)")
                dispatchGroup.leave()
            }
            tasks.append(task)
        }
        
        tasks.forEach { $0.perform() }
        
        dispatchGroup.wait()
        
        debugPrint("ALL Tasks completed!")
    }
    
    //Operation
    func runOperation() {
        
        let operationQueue = OperationQueue()
        //count of operations
        //if 1 - serial
        //if 2 and >2 - concurrent
        operationQueue.maxConcurrentOperationCount = 2
        
        //Operation
        
        operationQueue.addOperation {
            Printer().printSomeText(text: "üöó operation 1")
        }
        
        operationQueue.addOperation {
            Printer().printSomeText(text: "üöô operation 2")
        }
        
        operationQueue.addOperation {
            Printer().printSomeText(text: "üöï operation 3")
        }
        
        operationQueue.addOperation {
            Printer().printSomeText(text: "üöì operation 4")
        }
        
        //–ø–æ–º—ñ—Ç–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏, —â–æ –æ–ø–µ—Ä–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞
        //operationQueue.cancelAllOperations()
    }
    
    //test –≤–∏–≤–æ–¥—É —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –µ–∫—Ä–∞–Ω
    //–ü–û–ì–ê–ù–ò–ô –ü–†–ò–ö–õ–ê–î - –Ø–ö –ù–ï –¢–†–ï–ë–ê –†–û–ë–ò–¢–ò)))
    func test() {
        
        let print = Printer()
        print.completion = { [weak self] params in
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                self?.counterLabel.text = params.text
                self?.progressView.progress = params.count
            }
        }
        
        DispatchQueue.global(qos: .default).async {
            
            print.printSomeTextWithCounter(text: "üöß test")
        }
    }
    
}

